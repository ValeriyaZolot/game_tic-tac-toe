import random


def check_used_cells(move, u_c):
    if move in u_c:
        return False
    else:
        return True


def func_px(uc, ac, availablec, all_moves_p, all_moves_c):
    move_p = str(input('Ваш ход: '))
    if not(move_p in ac):
        print('Ошибка: Выход за пределы поля')
        return func_px(uc, ac, availablec, all_moves_p, all_moves_c)
    if check_used_cells(move_p, uc) == True:
        uc.append(move_p)
    else:
        print('Ошибка: Эта клетка уже занята')
        return func_px(uc, ac, availablec, all_moves_p, all_moves_c)
    availablec.remove(move_p)
    move_c = str(random.choice(availablec))
    print('Ход компьютера:', move_c)
    availablec.remove(move_c)
    all_moves_p.append(move_p)
    all_moves_c.append(move_c)
    uc.append(move_c)

    return uc, all_moves_p, all_moves_c


def func_p0(uc, ac, availablec, all_moves_p, all_moves_c):
    move_c = str(random.choice(availablec))
    print('Ход компьютера:', move_c)
    availablec.remove(move_c)
    uc.append(move_c)
    move_p = str(input('Ваш ход: '))
    if not (move_p in ac):
        print('Ошибка: Выход за пределы поля')
        return func_p0(uc, ac, availablec, all_moves_p, all_moves_c)
    if check_used_cells(move_p, uc) == True:
        uc.append(move_p)
    else:
        print('Ошибка: Эта клетка уже занята')
        return func_p0(uc, ac, availablec, all_moves_p, all_moves_c)
    availablec.remove(move_p)
    all_moves_p.append(move_p)
    all_moves_c.append(move_c)

    return uc, all_moves_p, all_moves_c


def check_win(all_moves_p, all_moves_c, win_options):    # Проверка выигрыша
    if sorted(all_moves_p) in win_options and sorted(all_moves_c) in win_options:
        print('Вы сыграли в ничью! Поздравляем и желаем удачи в следующей игре!')
        return True
    elif sorted(all_moves_p) in win_options:
        print('Вы выиграли:) Поздравляем с победой!')
        return True
    elif sorted(all_moves_c) in win_options:
        print('Вы проиграли:( Желаем удачи в следующей игре!')
        return True
    else:
        return False


def check_win_1(all_moves_p, all_moves_c, win_options):
    all_moves_p_1 = sorted(all_moves_p[:3])
    all_moves_p_2 = all_moves_p[0], all_moves_p[1], all_moves_p[3]
    all_moves_p_2 = sorted(list(all_moves_p_2))
    all_moves_p_3 = all_moves_p[0], all_moves_p[2], all_moves_p[3]
    all_moves_p_3 = sorted(list(all_moves_p_3))
    all_moves_p_4 = sorted(all_moves_p[1:])
    all_moves_c_1 = sorted(all_moves_c[:3])
    all_moves_c_2 = all_moves_c[0], all_moves_c[1], all_moves_c[3]
    all_moves_c_2 = sorted(list(all_moves_c_2))
    all_moves_c_3 = all_moves_c[0], all_moves_c[2], all_moves_c[3]
    all_moves_c_3 = sorted(list(all_moves_c_3))
    all_moves_c_4 = sorted(all_moves_c[1:])
    if (all_moves_p_1 in win_options or all_moves_p_2 in win_options or all_moves_p_3 in win_options or all_moves_p_4 in win_options) \
            and (all_moves_c_1 in win_options or all_moves_c_2 in win_options or all_moves_c_3 in win_options or all_moves_c_4 in win_options):
        print('Вы сыграли в ничью! Поздравляем и желаем удачи в следующей игре!')
        return True
    elif all_moves_p_1 in win_options or all_moves_p_2 in win_options or all_moves_p_3 in win_options or all_moves_p_4 in win_options:
        print('Вы выиграли:) Поздравляем с победой!')
        return True
    elif all_moves_c_1 in win_options or all_moves_c_2 in win_options or all_moves_c_3 in win_options or all_moves_c_4 in win_options:
        print('Вы проиграли:( Желаем удачи в следующей игре!')
        return True
    else:
        print('Ничья! Ни вы, ни компьютер не подобрали выигрышную стратегию:( Желаем удачи в следующей игре!')
        return False


print('Ваше поле для игры в крестики-нолики:')
print('  0 1 2')
print('0 - - -')
print('1 - - -')
print('2 - - -')
P = str(input('Вы будете играть "x" или "0"? '))
print('Чтобы сделать ход, введите клетку, в которой хотите поставить x или 0')
print('и введите её номер в форме  ij, где i - номер строки, j - номер столбца')
All_cells = ['00', '01', '02', '10', '11', '12', '20', '21', '22']    # Перечень всех клеток, доступных в игре
Used_cells = []    # Строка, в которой фиксируются уже занятые клетки
Available_cells_for_computer = All_cells    # Клетки, доступные для хода компьютера
n = 0    # Число ходов
All_moves_p = []
All_moves_c = []
Win_options = [['00', '01', '02'], ['10', '11', '12'], ['20', '21', '22'],
['00', '10', '20'], ['01', '11, 21'], ['02', '12', '22'], ['00', '11', '22'], ['02', '11', '20']]
if P == 'x':
    while n < 3:
        Used_cells, All_moves_p, All_moves_c = func_px(Used_cells, All_cells, Available_cells_for_computer, All_moves_p, All_moves_c)
        n += 1
if P == '0':
    while n < 3:
        Used_cells, All_moves_p, All_moves_c = func_p0(Used_cells, All_cells, Available_cells_for_computer, All_moves_p, All_moves_c)
        n += 1

check_win(All_moves_p, All_moves_c, Win_options)
if check_win(All_moves_p, All_moves_c, Win_options) == False:
    if P == 'x':
        Used_cells, All_moves_p, All_moves_c = func_px(Used_cells, All_cells, Available_cells_for_computer, All_moves_p,
                                                       All_moves_c)
    elif P == '0':
        Used_cells, All_moves_p, All_moves_c = func_p0(Used_cells, All_cells, Available_cells_for_computer, All_moves_p,
                                                       All_moves_c)
    check_win_1(All_moves_p, All_moves_c, Win_options)
